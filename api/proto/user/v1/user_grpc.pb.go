// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: user/v1/user.proto

package userpbv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserService_UpdateUserProfile_FullMethodName            = "/user.v1.UserService/UpdateUserProfile"
	UserService_GetProfilePhotoUploadURL_FullMethodName     = "/user.v1.UserService/GetProfilePhotoUploadURL"
	UserService_ConfirmProfilePhotoUpload_FullMethodName    = "/user.v1.UserService/ConfirmProfilePhotoUpload"
	UserService_UpdateUserPartnerPreferences_FullMethodName = "/user.v1.UserService/UpdateUserPartnerPreferences"
	UserService_RecordMatchAction_FullMethodName            = "/user.v1.UserService/RecordMatchAction"
	UserService_GetMatchRecommendations_FullMethodName      = "/user.v1.UserService/GetMatchRecommendations"
	UserService_GetProfilesByMatchAction_FullMethodName     = "/user.v1.UserService/GetProfilesByMatchAction"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	// User profile management
	UpdateUserProfile(ctx context.Context, in *UpdateUserProfileRequest, opts ...grpc.CallOption) (*UpdateUserProfileResponse, error)
	// User profile photo management
	GetProfilePhotoUploadURL(ctx context.Context, in *GetProfilePhotoUploadURLRequest, opts ...grpc.CallOption) (*GetProfilePhotoUploadURLResponse, error)
	ConfirmProfilePhotoUpload(ctx context.Context, in *ConfirmProfilePhotoUploadRequest, opts ...grpc.CallOption) (*ConfirmProfilePhotoUploadResponse, error)
	// Partner preferences management
	UpdateUserPartnerPreferences(ctx context.Context, in *UpdateUserPartnerPreferencesRequest, opts ...grpc.CallOption) (*UpdateUserPartnerPreferencesResponse, error)
	// Match making
	RecordMatchAction(ctx context.Context, in *RecordMatchActionRequest, opts ...grpc.CallOption) (*RecordMatchActionResponse, error)
	GetMatchRecommendations(ctx context.Context, in *GetMatchRecommendationsRequest, opts ...grpc.CallOption) (*GetMatchRecommendationsResponse, error)
	GetProfilesByMatchAction(ctx context.Context, in *GetProfilesByMatchActionRequest, opts ...grpc.CallOption) (*GetProfilesByMatchActionResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) UpdateUserProfile(ctx context.Context, in *UpdateUserProfileRequest, opts ...grpc.CallOption) (*UpdateUserProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserProfileResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateUserProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetProfilePhotoUploadURL(ctx context.Context, in *GetProfilePhotoUploadURLRequest, opts ...grpc.CallOption) (*GetProfilePhotoUploadURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProfilePhotoUploadURLResponse)
	err := c.cc.Invoke(ctx, UserService_GetProfilePhotoUploadURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ConfirmProfilePhotoUpload(ctx context.Context, in *ConfirmProfilePhotoUploadRequest, opts ...grpc.CallOption) (*ConfirmProfilePhotoUploadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfirmProfilePhotoUploadResponse)
	err := c.cc.Invoke(ctx, UserService_ConfirmProfilePhotoUpload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUserPartnerPreferences(ctx context.Context, in *UpdateUserPartnerPreferencesRequest, opts ...grpc.CallOption) (*UpdateUserPartnerPreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserPartnerPreferencesResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateUserPartnerPreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RecordMatchAction(ctx context.Context, in *RecordMatchActionRequest, opts ...grpc.CallOption) (*RecordMatchActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecordMatchActionResponse)
	err := c.cc.Invoke(ctx, UserService_RecordMatchAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetMatchRecommendations(ctx context.Context, in *GetMatchRecommendationsRequest, opts ...grpc.CallOption) (*GetMatchRecommendationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMatchRecommendationsResponse)
	err := c.cc.Invoke(ctx, UserService_GetMatchRecommendations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetProfilesByMatchAction(ctx context.Context, in *GetProfilesByMatchActionRequest, opts ...grpc.CallOption) (*GetProfilesByMatchActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProfilesByMatchActionResponse)
	err := c.cc.Invoke(ctx, UserService_GetProfilesByMatchAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility.
type UserServiceServer interface {
	// User profile management
	UpdateUserProfile(context.Context, *UpdateUserProfileRequest) (*UpdateUserProfileResponse, error)
	// User profile photo management
	GetProfilePhotoUploadURL(context.Context, *GetProfilePhotoUploadURLRequest) (*GetProfilePhotoUploadURLResponse, error)
	ConfirmProfilePhotoUpload(context.Context, *ConfirmProfilePhotoUploadRequest) (*ConfirmProfilePhotoUploadResponse, error)
	// Partner preferences management
	UpdateUserPartnerPreferences(context.Context, *UpdateUserPartnerPreferencesRequest) (*UpdateUserPartnerPreferencesResponse, error)
	// Match making
	RecordMatchAction(context.Context, *RecordMatchActionRequest) (*RecordMatchActionResponse, error)
	GetMatchRecommendations(context.Context, *GetMatchRecommendationsRequest) (*GetMatchRecommendationsResponse, error)
	GetProfilesByMatchAction(context.Context, *GetProfilesByMatchActionRequest) (*GetProfilesByMatchActionResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserServiceServer struct{}

func (UnimplementedUserServiceServer) UpdateUserProfile(context.Context, *UpdateUserProfileRequest) (*UpdateUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserProfile not implemented")
}
func (UnimplementedUserServiceServer) GetProfilePhotoUploadURL(context.Context, *GetProfilePhotoUploadURLRequest) (*GetProfilePhotoUploadURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfilePhotoUploadURL not implemented")
}
func (UnimplementedUserServiceServer) ConfirmProfilePhotoUpload(context.Context, *ConfirmProfilePhotoUploadRequest) (*ConfirmProfilePhotoUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmProfilePhotoUpload not implemented")
}
func (UnimplementedUserServiceServer) UpdateUserPartnerPreferences(context.Context, *UpdateUserPartnerPreferencesRequest) (*UpdateUserPartnerPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserPartnerPreferences not implemented")
}
func (UnimplementedUserServiceServer) RecordMatchAction(context.Context, *RecordMatchActionRequest) (*RecordMatchActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordMatchAction not implemented")
}
func (UnimplementedUserServiceServer) GetMatchRecommendations(context.Context, *GetMatchRecommendationsRequest) (*GetMatchRecommendationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatchRecommendations not implemented")
}
func (UnimplementedUserServiceServer) GetProfilesByMatchAction(context.Context, *GetProfilesByMatchActionRequest) (*GetProfilesByMatchActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfilesByMatchAction not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}
func (UnimplementedUserServiceServer) testEmbeddedByValue()                     {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_UpdateUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUserProfile(ctx, req.(*UpdateUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetProfilePhotoUploadURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfilePhotoUploadURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetProfilePhotoUploadURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetProfilePhotoUploadURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetProfilePhotoUploadURL(ctx, req.(*GetProfilePhotoUploadURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ConfirmProfilePhotoUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmProfilePhotoUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ConfirmProfilePhotoUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ConfirmProfilePhotoUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ConfirmProfilePhotoUpload(ctx, req.(*ConfirmProfilePhotoUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUserPartnerPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserPartnerPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUserPartnerPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateUserPartnerPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUserPartnerPreferences(ctx, req.(*UpdateUserPartnerPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RecordMatchAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordMatchActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RecordMatchAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RecordMatchAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RecordMatchAction(ctx, req.(*RecordMatchActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetMatchRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMatchRecommendationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetMatchRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetMatchRecommendations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetMatchRecommendations(ctx, req.(*GetMatchRecommendationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetProfilesByMatchAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfilesByMatchActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetProfilesByMatchAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetProfilesByMatchAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetProfilesByMatchAction(ctx, req.(*GetProfilesByMatchActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.v1.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateUserProfile",
			Handler:    _UserService_UpdateUserProfile_Handler,
		},
		{
			MethodName: "GetProfilePhotoUploadURL",
			Handler:    _UserService_GetProfilePhotoUploadURL_Handler,
		},
		{
			MethodName: "ConfirmProfilePhotoUpload",
			Handler:    _UserService_ConfirmProfilePhotoUpload_Handler,
		},
		{
			MethodName: "UpdateUserPartnerPreferences",
			Handler:    _UserService_UpdateUserPartnerPreferences_Handler,
		},
		{
			MethodName: "RecordMatchAction",
			Handler:    _UserService_RecordMatchAction_Handler,
		},
		{
			MethodName: "GetMatchRecommendations",
			Handler:    _UserService_GetMatchRecommendations_Handler,
		},
		{
			MethodName: "GetProfilesByMatchAction",
			Handler:    _UserService_GetProfilesByMatchAction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/v1/user.proto",
}
