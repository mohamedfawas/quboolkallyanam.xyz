// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: payment/v1/payment.proto

package paymentpbv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PaymentService_CreatePaymentOrder_FullMethodName             = "/payment.v1.PaymentService/CreatePaymentOrder"
	PaymentService_ShowPaymentPage_FullMethodName                = "/payment.v1.PaymentService/ShowPaymentPage"
	PaymentService_VerifyPayment_FullMethodName                  = "/payment.v1.PaymentService/VerifyPayment"
	PaymentService_CreateOrUpdateSubscriptionPlan_FullMethodName = "/payment.v1.PaymentService/CreateOrUpdateSubscriptionPlan"
	PaymentService_GetSubscriptionPlan_FullMethodName            = "/payment.v1.PaymentService/GetSubscriptionPlan"
	PaymentService_GetActiveSubscriptionPlans_FullMethodName     = "/payment.v1.PaymentService/GetActiveSubscriptionPlans"
	PaymentService_GetActiveSubscriptionByUserID_FullMethodName  = "/payment.v1.PaymentService/GetActiveSubscriptionByUserID"
	PaymentService_GetPaymentHistory_FullMethodName              = "/payment.v1.PaymentService/GetPaymentHistory"
)

// PaymentServiceClient is the client API for PaymentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentServiceClient interface {
	CreatePaymentOrder(ctx context.Context, in *CreatePaymentOrderRequest, opts ...grpc.CallOption) (*CreatePaymentOrderResponse, error)
	ShowPaymentPage(ctx context.Context, in *ShowPaymentPageRequest, opts ...grpc.CallOption) (*ShowPaymentPageResponse, error)
	VerifyPayment(ctx context.Context, in *VerifyPaymentRequest, opts ...grpc.CallOption) (*VerifyPaymentResponse, error)
	CreateOrUpdateSubscriptionPlan(ctx context.Context, in *CreateOrUpdateSubscriptionPlanRequest, opts ...grpc.CallOption) (*CreateOrUpdateSubscriptionPlanResponse, error)
	GetSubscriptionPlan(ctx context.Context, in *GetSubscriptionPlanRequest, opts ...grpc.CallOption) (*GetSubscriptionPlanResponse, error)
	GetActiveSubscriptionPlans(ctx context.Context, in *GetActiveSubscriptionPlansRequest, opts ...grpc.CallOption) (*GetActiveSubscriptionPlansResponse, error)
	GetActiveSubscriptionByUserID(ctx context.Context, in *GetActiveSubscriptionByUserIDRequest, opts ...grpc.CallOption) (*GetActiveSubscriptionByUserIDResponse, error)
	GetPaymentHistory(ctx context.Context, in *GetPaymentHistoryRequest, opts ...grpc.CallOption) (*GetPaymentHistoryResponse, error)
}

type paymentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentServiceClient(cc grpc.ClientConnInterface) PaymentServiceClient {
	return &paymentServiceClient{cc}
}

func (c *paymentServiceClient) CreatePaymentOrder(ctx context.Context, in *CreatePaymentOrderRequest, opts ...grpc.CallOption) (*CreatePaymentOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePaymentOrderResponse)
	err := c.cc.Invoke(ctx, PaymentService_CreatePaymentOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) ShowPaymentPage(ctx context.Context, in *ShowPaymentPageRequest, opts ...grpc.CallOption) (*ShowPaymentPageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShowPaymentPageResponse)
	err := c.cc.Invoke(ctx, PaymentService_ShowPaymentPage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) VerifyPayment(ctx context.Context, in *VerifyPaymentRequest, opts ...grpc.CallOption) (*VerifyPaymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyPaymentResponse)
	err := c.cc.Invoke(ctx, PaymentService_VerifyPayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) CreateOrUpdateSubscriptionPlan(ctx context.Context, in *CreateOrUpdateSubscriptionPlanRequest, opts ...grpc.CallOption) (*CreateOrUpdateSubscriptionPlanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrUpdateSubscriptionPlanResponse)
	err := c.cc.Invoke(ctx, PaymentService_CreateOrUpdateSubscriptionPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GetSubscriptionPlan(ctx context.Context, in *GetSubscriptionPlanRequest, opts ...grpc.CallOption) (*GetSubscriptionPlanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSubscriptionPlanResponse)
	err := c.cc.Invoke(ctx, PaymentService_GetSubscriptionPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GetActiveSubscriptionPlans(ctx context.Context, in *GetActiveSubscriptionPlansRequest, opts ...grpc.CallOption) (*GetActiveSubscriptionPlansResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetActiveSubscriptionPlansResponse)
	err := c.cc.Invoke(ctx, PaymentService_GetActiveSubscriptionPlans_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GetActiveSubscriptionByUserID(ctx context.Context, in *GetActiveSubscriptionByUserIDRequest, opts ...grpc.CallOption) (*GetActiveSubscriptionByUserIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetActiveSubscriptionByUserIDResponse)
	err := c.cc.Invoke(ctx, PaymentService_GetActiveSubscriptionByUserID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GetPaymentHistory(ctx context.Context, in *GetPaymentHistoryRequest, opts ...grpc.CallOption) (*GetPaymentHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPaymentHistoryResponse)
	err := c.cc.Invoke(ctx, PaymentService_GetPaymentHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentServiceServer is the server API for PaymentService service.
// All implementations must embed UnimplementedPaymentServiceServer
// for forward compatibility.
type PaymentServiceServer interface {
	CreatePaymentOrder(context.Context, *CreatePaymentOrderRequest) (*CreatePaymentOrderResponse, error)
	ShowPaymentPage(context.Context, *ShowPaymentPageRequest) (*ShowPaymentPageResponse, error)
	VerifyPayment(context.Context, *VerifyPaymentRequest) (*VerifyPaymentResponse, error)
	CreateOrUpdateSubscriptionPlan(context.Context, *CreateOrUpdateSubscriptionPlanRequest) (*CreateOrUpdateSubscriptionPlanResponse, error)
	GetSubscriptionPlan(context.Context, *GetSubscriptionPlanRequest) (*GetSubscriptionPlanResponse, error)
	GetActiveSubscriptionPlans(context.Context, *GetActiveSubscriptionPlansRequest) (*GetActiveSubscriptionPlansResponse, error)
	GetActiveSubscriptionByUserID(context.Context, *GetActiveSubscriptionByUserIDRequest) (*GetActiveSubscriptionByUserIDResponse, error)
	GetPaymentHistory(context.Context, *GetPaymentHistoryRequest) (*GetPaymentHistoryResponse, error)
	mustEmbedUnimplementedPaymentServiceServer()
}

// UnimplementedPaymentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPaymentServiceServer struct{}

func (UnimplementedPaymentServiceServer) CreatePaymentOrder(context.Context, *CreatePaymentOrderRequest) (*CreatePaymentOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePaymentOrder not implemented")
}
func (UnimplementedPaymentServiceServer) ShowPaymentPage(context.Context, *ShowPaymentPageRequest) (*ShowPaymentPageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowPaymentPage not implemented")
}
func (UnimplementedPaymentServiceServer) VerifyPayment(context.Context, *VerifyPaymentRequest) (*VerifyPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyPayment not implemented")
}
func (UnimplementedPaymentServiceServer) CreateOrUpdateSubscriptionPlan(context.Context, *CreateOrUpdateSubscriptionPlanRequest) (*CreateOrUpdateSubscriptionPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateSubscriptionPlan not implemented")
}
func (UnimplementedPaymentServiceServer) GetSubscriptionPlan(context.Context, *GetSubscriptionPlanRequest) (*GetSubscriptionPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscriptionPlan not implemented")
}
func (UnimplementedPaymentServiceServer) GetActiveSubscriptionPlans(context.Context, *GetActiveSubscriptionPlansRequest) (*GetActiveSubscriptionPlansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveSubscriptionPlans not implemented")
}
func (UnimplementedPaymentServiceServer) GetActiveSubscriptionByUserID(context.Context, *GetActiveSubscriptionByUserIDRequest) (*GetActiveSubscriptionByUserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveSubscriptionByUserID not implemented")
}
func (UnimplementedPaymentServiceServer) GetPaymentHistory(context.Context, *GetPaymentHistoryRequest) (*GetPaymentHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentHistory not implemented")
}
func (UnimplementedPaymentServiceServer) mustEmbedUnimplementedPaymentServiceServer() {}
func (UnimplementedPaymentServiceServer) testEmbeddedByValue()                        {}

// UnsafePaymentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentServiceServer will
// result in compilation errors.
type UnsafePaymentServiceServer interface {
	mustEmbedUnimplementedPaymentServiceServer()
}

func RegisterPaymentServiceServer(s grpc.ServiceRegistrar, srv PaymentServiceServer) {
	// If the following call pancis, it indicates UnimplementedPaymentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PaymentService_ServiceDesc, srv)
}

func _PaymentService_CreatePaymentOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePaymentOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).CreatePaymentOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_CreatePaymentOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).CreatePaymentOrder(ctx, req.(*CreatePaymentOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_ShowPaymentPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowPaymentPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).ShowPaymentPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_ShowPaymentPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).ShowPaymentPage(ctx, req.(*ShowPaymentPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_VerifyPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).VerifyPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_VerifyPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).VerifyPayment(ctx, req.(*VerifyPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_CreateOrUpdateSubscriptionPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrUpdateSubscriptionPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).CreateOrUpdateSubscriptionPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_CreateOrUpdateSubscriptionPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).CreateOrUpdateSubscriptionPlan(ctx, req.(*CreateOrUpdateSubscriptionPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GetSubscriptionPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscriptionPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetSubscriptionPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_GetSubscriptionPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetSubscriptionPlan(ctx, req.(*GetSubscriptionPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GetActiveSubscriptionPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveSubscriptionPlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetActiveSubscriptionPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_GetActiveSubscriptionPlans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetActiveSubscriptionPlans(ctx, req.(*GetActiveSubscriptionPlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GetActiveSubscriptionByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveSubscriptionByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetActiveSubscriptionByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_GetActiveSubscriptionByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetActiveSubscriptionByUserID(ctx, req.(*GetActiveSubscriptionByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GetPaymentHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaymentHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetPaymentHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_GetPaymentHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetPaymentHistory(ctx, req.(*GetPaymentHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentService_ServiceDesc is the grpc.ServiceDesc for PaymentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payment.v1.PaymentService",
	HandlerType: (*PaymentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePaymentOrder",
			Handler:    _PaymentService_CreatePaymentOrder_Handler,
		},
		{
			MethodName: "ShowPaymentPage",
			Handler:    _PaymentService_ShowPaymentPage_Handler,
		},
		{
			MethodName: "VerifyPayment",
			Handler:    _PaymentService_VerifyPayment_Handler,
		},
		{
			MethodName: "CreateOrUpdateSubscriptionPlan",
			Handler:    _PaymentService_CreateOrUpdateSubscriptionPlan_Handler,
		},
		{
			MethodName: "GetSubscriptionPlan",
			Handler:    _PaymentService_GetSubscriptionPlan_Handler,
		},
		{
			MethodName: "GetActiveSubscriptionPlans",
			Handler:    _PaymentService_GetActiveSubscriptionPlans_Handler,
		},
		{
			MethodName: "GetActiveSubscriptionByUserID",
			Handler:    _PaymentService_GetActiveSubscriptionByUserID_Handler,
		},
		{
			MethodName: "GetPaymentHistory",
			Handler:    _PaymentService_GetPaymentHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payment/v1/payment.proto",
}
