{
    "swagger": "2.0",
    "info": {
        "description": "REST API Gateway for Qubool Kallyanam microservices",
        "title": "Qubool Kallyanam Gateway API",
        "termsOfService": "http://quboolkallyanam.xyz/terms/",
        "contact": {
            "name": "Mohamed Fawas",
            "url": "https://quboolkallyanam.xyz",
            "email": "adminquboolkallyanam@gmail.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "1.0"
    },
    "host": "quboolkallyanam.xyz",
    "basePath": "/api/v1",
    "paths": {
        "/api/v1/auth/user/delete": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "User delete",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "User delete",
                "parameters": [
                    {
                        "description": "User delete request",
                        "name": "user_delete_request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UserDeleteRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User delete response",
                        "schema": {
                            "$ref": "#/definitions/dto.UserDeleteResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - validation errors",
                        "schema": {
                            "$ref": "#/definitions/dto.BadRequestError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/dto.UnauthorizedError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.InternalServerError"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/user/login": {
            "post": {
                "description": "User login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "User login request",
                        "name": "user_login_request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UserLoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User login response",
                        "schema": {
                            "$ref": "#/definitions/dto.UserLoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - validation errors",
                        "schema": {
                            "$ref": "#/definitions/dto.BadRequestError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/dto.UnauthorizedError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.InternalServerError"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/user/logout": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "User logout",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "User logout",
                "responses": {
                    "200": {
                        "description": "User logout response",
                        "schema": {
                            "$ref": "#/definitions/dto.UserLogoutResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - validation errors",
                        "schema": {
                            "$ref": "#/definitions/dto.BadRequestError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.InternalServerError"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/user/refresh": {
            "post": {
                "description": "Refresh the access token using a valid refresh token passed in headers",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Refresh token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Refresh token",
                        "name": "Refresh-Token",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Refresh token response",
                        "schema": {
                            "$ref": "#/definitions/dto.RefreshTokenResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - validation errors",
                        "schema": {
                            "$ref": "#/definitions/dto.BadRequestError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/dto.UnauthorizedError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.InternalServerError"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/user/register": {
            "post": {
                "description": "User register",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "User register",
                "parameters": [
                    {
                        "description": "User register request",
                        "name": "user_register_request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UserRegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User register response",
                        "schema": {
                            "$ref": "#/definitions/dto.UserRegisterResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - validation errors",
                        "schema": {
                            "$ref": "#/definitions/dto.BadRequestError"
                        }
                    },
                    "409": {
                        "description": "Conflict - email/phone already exists",
                        "schema": {
                            "$ref": "#/definitions/dto.ConflictError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.InternalServerError"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/user/verify": {
            "post": {
                "description": "User verification",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "User verification",
                "parameters": [
                    {
                        "description": "User verification request",
                        "name": "user_verification_request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UserVerificationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User verification response",
                        "schema": {
                            "$ref": "#/definitions/dto.UserVerificationResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - validation errors",
                        "schema": {
                            "$ref": "#/definitions/dto.BadRequestError"
                        }
                    },
                    "404": {
                        "description": "User not found/OTP expired",
                        "schema": {
                            "$ref": "#/definitions/dto.NotFoundError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.InternalServerError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.BadRequestError": {
            "type": "object",
            "properties": {
                "error": {
                    "$ref": "#/definitions/dto.ErrorInfo"
                },
                "message": {
                    "type": "string",
                    "example": "Please check the request parameters"
                },
                "request_id": {
                    "type": "string",
                    "example": "req_123"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                },
                "timestamp": {
                    "type": "string",
                    "example": "2025-01-27T10:30:00Z"
                }
            }
        },
        "dto.ConflictError": {
            "type": "object",
            "properties": {
                "error": {
                    "$ref": "#/definitions/dto.ErrorInfo"
                },
                "message": {
                    "type": "string",
                    "example": "The resource you are looking for might have been removed, had its name changed, or is temporarily unavailable."
                },
                "request_id": {
                    "type": "string",
                    "example": "req_123"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                },
                "timestamp": {
                    "type": "string",
                    "example": "2025-01-27T10:30:00Z"
                }
            }
        },
        "dto.ErrorInfo": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "details": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "dto.InternalServerError": {
            "type": "object",
            "properties": {
                "error": {
                    "$ref": "#/definitions/dto.ErrorInfo"
                },
                "message": {
                    "type": "string",
                    "example": "Something went wrong. Please try again later."
                },
                "request_id": {
                    "type": "string",
                    "example": "req_123"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                },
                "timestamp": {
                    "type": "string",
                    "example": "2025-01-27T10:30:00Z"
                }
            }
        },
        "dto.NotFoundError": {
            "type": "object",
            "properties": {
                "error": {
                    "$ref": "#/definitions/dto.ErrorInfo"
                },
                "message": {
                    "type": "string",
                    "example": "The resource you are looking for might have been removed, had its name changed, or is temporarily unavailable."
                },
                "request_id": {
                    "type": "string",
                    "example": "req_123"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                },
                "timestamp": {
                    "type": "string",
                    "example": "2025-01-27T10:30:00Z"
                }
            }
        },
        "dto.RefreshTokenResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "expires_in": {
                    "type": "integer"
                },
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "dto.UnauthorizedError": {
            "type": "object",
            "properties": {
                "error": {
                    "$ref": "#/definitions/dto.ErrorInfo"
                },
                "message": {
                    "type": "string",
                    "example": "You are not authorized to access this resource"
                },
                "request_id": {
                    "type": "string",
                    "example": "req_123"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                },
                "timestamp": {
                    "type": "string",
                    "example": "2025-01-27T10:30:00Z"
                }
            }
        },
        "dto.UserDeleteRequest": {
            "type": "object",
            "required": [
                "password"
            ],
            "properties": {
                "password": {
                    "type": "string",
                    "minLength": 8
                }
            }
        },
        "dto.UserDeleteResponse": {
            "type": "object",
            "properties": {
                "success": {
                    "type": "boolean"
                }
            }
        },
        "dto.UserLoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 8
                }
            }
        },
        "dto.UserLoginResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "expires_in": {
                    "type": "integer"
                },
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "dto.UserLogoutResponse": {
            "type": "object",
            "properties": {
                "success": {
                    "type": "boolean"
                }
            }
        },
        "dto.UserRegisterRequest": {
            "type": "object",
            "required": [
                "email",
                "password",
                "phone"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 8
                },
                "phone": {
                    "type": "string"
                }
            }
        },
        "dto.UserRegisterResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                }
            }
        },
        "dto.UserVerificationRequest": {
            "type": "object",
            "required": [
                "email",
                "otp"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "otp": {
                    "type": "string"
                }
            }
        },
        "dto.UserVerificationResponse": {
            "type": "object",
            "properties": {
                "success": {
                    "type": "boolean"
                }
            }
        }
    }
}