basePath: /api/v1
definitions:
  dto.AdminLoginRequest:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  dto.AdminLoginResponse:
    properties:
      access_token:
        type: string
      expires_in:
        type: integer
      refresh_token:
        type: string
    type: object
  dto.AdminLogoutResponse:
    properties:
      success:
        type: boolean
    type: object
  dto.BadRequestError:
    properties:
      error:
        $ref: '#/definitions/dto.ErrorInfo'
      message:
        example: Please check the request parameters
        type: string
      request_id:
        example: req_123
        type: string
      success:
        example: false
        type: boolean
      timestamp:
        example: "2025-01-27T10:30:00Z"
        type: string
    type: object
  dto.BlockUserRequest:
    properties:
      field:
        enum:
        - email
        - phone
        - id
        type: string
      value:
        type: string
    required:
    - field
    - value
    type: object
  dto.BlockUserResponse:
    properties:
      success:
        type: boolean
    type: object
  dto.ConflictError:
    properties:
      error:
        $ref: '#/definitions/dto.ErrorInfo'
      message:
        example: The resource you are looking for might have been removed, had its
          name changed, or is temporarily unavailable.
        type: string
      request_id:
        example: req_123
        type: string
      success:
        example: false
        type: boolean
      timestamp:
        example: "2025-01-27T10:30:00Z"
        type: string
    type: object
  dto.ErrorInfo:
    properties:
      code:
        type: string
      details:
        additionalProperties:
          type: string
        type: object
      message:
        type: string
    type: object
  dto.ForbiddenError:
    properties:
      error:
        $ref: '#/definitions/dto.ErrorInfo'
      message:
        example: You are not allowed to access this resource
        type: string
      request_id:
        example: req_123
        type: string
      success:
        example: false
        type: boolean
      timestamp:
        example: "2025-01-27T10:30:00Z"
        type: string
    type: object
  dto.GetUserByFieldResponse:
    properties:
      user:
        $ref: '#/definitions/dto.GetUserResponse'
    type: object
  dto.GetUserResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      email_verified:
        type: boolean
      id:
        type: string
      is_blocked:
        type: boolean
      last_login_at:
        type: string
      phone:
        type: string
      premium_until:
        type: string
      updated_at:
        type: string
    type: object
  dto.GetUsersResponse:
    properties:
      users:
        items:
          $ref: '#/definitions/dto.GetUserResponse'
        type: array
    type: object
  dto.InternalServerError:
    properties:
      error:
        $ref: '#/definitions/dto.ErrorInfo'
      message:
        example: Something went wrong. Please try again later.
        type: string
      request_id:
        example: req_123
        type: string
      success:
        example: false
        type: boolean
      timestamp:
        example: "2025-01-27T10:30:00Z"
        type: string
    type: object
  dto.NotFoundError:
    properties:
      error:
        $ref: '#/definitions/dto.ErrorInfo'
      message:
        example: The resource you are looking for might have been removed, had its
          name changed, or is temporarily unavailable.
        type: string
      request_id:
        example: req_123
        type: string
      success:
        example: false
        type: boolean
      timestamp:
        example: "2025-01-27T10:30:00Z"
        type: string
    type: object
  dto.RefreshTokenResponse:
    properties:
      access_token:
        type: string
      expires_in:
        type: integer
      refresh_token:
        type: string
    type: object
  dto.UnauthorizedError:
    properties:
      error:
        $ref: '#/definitions/dto.ErrorInfo'
      message:
        example: You are not authorized to access this resource
        type: string
      request_id:
        example: req_123
        type: string
      success:
        example: false
        type: boolean
      timestamp:
        example: "2025-01-27T10:30:00Z"
        type: string
    type: object
  dto.UserDeleteRequest:
    properties:
      password:
        minLength: 8
        type: string
    required:
    - password
    type: object
  dto.UserDeleteResponse:
    properties:
      success:
        type: boolean
    type: object
  dto.UserLoginRequest:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  dto.UserLoginResponse:
    properties:
      access_token:
        type: string
      expires_in:
        type: integer
      refresh_token:
        type: string
    type: object
  dto.UserLogoutResponse:
    properties:
      success:
        type: boolean
    type: object
  dto.UserRegisterRequest:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
      phone:
        type: string
    required:
    - email
    - password
    - phone
    type: object
  dto.UserRegisterResponse:
    properties:
      email:
        type: string
      phone:
        type: string
    type: object
  dto.UserVerificationRequest:
    properties:
      email:
        type: string
      otp:
        type: string
    required:
    - email
    - otp
    type: object
  dto.UserVerificationResponse:
    properties:
      success:
        type: boolean
    type: object
host: quboolkallyanam.xyz
info:
  contact:
    email: adminquboolkallyanam@gmail.com
    name: Mohamed Fawas
    url: https://quboolkallyanam.xyz
  description: REST API Gateway for Qubool Kallyanam microservices
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://quboolkallyanam.xyz/terms/
  title: Qubool Kallyanam Gateway API
  version: "1.0"
paths:
  /api/v1/auth/admin/block-user:
    post:
      consumes:
      - application/json
      description: Block a user by email, phone, or ID
      parameters:
      - description: Block user request
        in: body
        name: block_user_request
        required: true
        schema:
          $ref: '#/definitions/dto.BlockUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Block user response
          schema:
            $ref: '#/definitions/dto.BlockUserResponse'
        "400":
          description: Bad request - validation errors
          schema:
            $ref: '#/definitions/dto.BadRequestError'
        "401":
          description: Unauthorized - invalid credentials
          schema:
            $ref: '#/definitions/dto.UnauthorizedError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.InternalServerError'
      security:
      - BearerAuth: []
      summary: Block user
      tags:
      - Auth
  /api/v1/auth/admin/login:
    post:
      consumes:
      - application/json
      description: Admin login
      parameters:
      - description: Admin login request
        in: body
        name: admin_login_request
        required: true
        schema:
          $ref: '#/definitions/dto.AdminLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Admin login response
          schema:
            $ref: '#/definitions/dto.AdminLoginResponse'
        "400":
          description: Bad request - validation errors
          schema:
            $ref: '#/definitions/dto.BadRequestError'
        "401":
          description: Unauthorized - invalid credentials
          schema:
            $ref: '#/definitions/dto.UnauthorizedError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.InternalServerError'
      summary: Admin login
      tags:
      - Auth
  /api/v1/auth/admin/logout:
    post:
      consumes:
      - application/json
      description: Admin logout
      produces:
      - application/json
      responses:
        "200":
          description: Admin logout response
          schema:
            $ref: '#/definitions/dto.AdminLogoutResponse'
        "400":
          description: Bad request - validation errors
          schema:
            $ref: '#/definitions/dto.BadRequestError'
        "401":
          description: Unauthorized - invalid credentials
          schema:
            $ref: '#/definitions/dto.UnauthorizedError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.InternalServerError'
      security:
      - BearerAuth: []
      summary: Admin logout
      tags:
      - Auth
  /api/v1/auth/admin/user:
    get:
      consumes:
      - application/json
      description: Get a specific user by email, phone, or ID for admin
      parameters:
      - description: Field to search by
        enum:
        - email
        - phone
        - id
        in: query
        name: field
        required: true
        type: string
      - description: Value to search for
        in: query
        name: value
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User details
          schema:
            $ref: '#/definitions/dto.GetUserByFieldResponse'
        "400":
          description: Bad request - validation errors
          schema:
            $ref: '#/definitions/dto.BadRequestError'
        "401":
          description: Unauthorized - invalid credentials
          schema:
            $ref: '#/definitions/dto.UnauthorizedError'
        "403":
          description: Forbidden - insufficient role
          schema:
            $ref: '#/definitions/dto.ForbiddenError'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/dto.NotFoundError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.InternalServerError'
      security:
      - BearerAuth: []
      summary: Get user by field
      tags:
      - Auth
  /api/v1/auth/admin/users:
    get:
      consumes:
      - application/json
      description: Get all users with pagination
      parameters:
      - description: Page number
        in: query
        name: page
        required: true
        type: integer
      - description: Items per page
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Users list
          schema:
            $ref: '#/definitions/dto.GetUsersResponse'
        "400":
          description: Bad request - validation errors
          schema:
            $ref: '#/definitions/dto.BadRequestError'
        "401":
          description: Unauthorized - invalid credentials
          schema:
            $ref: '#/definitions/dto.UnauthorizedError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.InternalServerError'
      security:
      - BearerAuth: []
      summary: Get users
      tags:
      - Auth
  /api/v1/auth/user/delete:
    post:
      consumes:
      - application/json
      description: User delete
      parameters:
      - description: User delete request
        in: body
        name: user_delete_request
        required: true
        schema:
          $ref: '#/definitions/dto.UserDeleteRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User delete response
          schema:
            $ref: '#/definitions/dto.UserDeleteResponse'
        "400":
          description: Bad request - validation errors
          schema:
            $ref: '#/definitions/dto.BadRequestError'
        "401":
          description: Unauthorized - invalid credentials
          schema:
            $ref: '#/definitions/dto.UnauthorizedError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.InternalServerError'
      security:
      - BearerAuth: []
      summary: User delete
      tags:
      - Auth
  /api/v1/auth/user/login:
    post:
      consumes:
      - application/json
      description: User login
      parameters:
      - description: User login request
        in: body
        name: user_login_request
        required: true
        schema:
          $ref: '#/definitions/dto.UserLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User login response
          schema:
            $ref: '#/definitions/dto.UserLoginResponse'
        "400":
          description: Bad request - validation errors
          schema:
            $ref: '#/definitions/dto.BadRequestError'
        "401":
          description: Unauthorized - invalid credentials
          schema:
            $ref: '#/definitions/dto.UnauthorizedError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.InternalServerError'
      summary: User login
      tags:
      - Auth
  /api/v1/auth/user/logout:
    post:
      consumes:
      - application/json
      description: User logout
      produces:
      - application/json
      responses:
        "200":
          description: User logout response
          schema:
            $ref: '#/definitions/dto.UserLogoutResponse'
        "400":
          description: Bad request - validation errors
          schema:
            $ref: '#/definitions/dto.BadRequestError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.InternalServerError'
      security:
      - BearerAuth: []
      summary: User logout
      tags:
      - Auth
  /api/v1/auth/user/refresh:
    post:
      consumes:
      - application/json
      description: Refresh the access token using a valid refresh token passed in
        headers
      parameters:
      - description: Refresh token
        in: header
        name: Refresh-Token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Refresh token response
          schema:
            $ref: '#/definitions/dto.RefreshTokenResponse'
        "400":
          description: Bad request - validation errors
          schema:
            $ref: '#/definitions/dto.BadRequestError'
        "401":
          description: Unauthorized - invalid credentials
          schema:
            $ref: '#/definitions/dto.UnauthorizedError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.InternalServerError'
      summary: Refresh token
      tags:
      - Auth
  /api/v1/auth/user/register:
    post:
      consumes:
      - application/json
      description: User register
      parameters:
      - description: User register request
        in: body
        name: user_register_request
        required: true
        schema:
          $ref: '#/definitions/dto.UserRegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User register response
          schema:
            $ref: '#/definitions/dto.UserRegisterResponse'
        "400":
          description: Bad request - validation errors
          schema:
            $ref: '#/definitions/dto.BadRequestError'
        "409":
          description: Conflict - email/phone already exists
          schema:
            $ref: '#/definitions/dto.ConflictError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.InternalServerError'
      summary: User register
      tags:
      - Auth
  /api/v1/auth/user/verify:
    post:
      consumes:
      - application/json
      description: User verification
      parameters:
      - description: User verification request
        in: body
        name: user_verification_request
        required: true
        schema:
          $ref: '#/definitions/dto.UserVerificationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User verification response
          schema:
            $ref: '#/definitions/dto.UserVerificationResponse'
        "400":
          description: Bad request - validation errors
          schema:
            $ref: '#/definitions/dto.BadRequestError'
        "404":
          description: User not found/OTP expired
          schema:
            $ref: '#/definitions/dto.NotFoundError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.InternalServerError'
      summary: User verification
      tags:
      - Auth
swagger: "2.0"
